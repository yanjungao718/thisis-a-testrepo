{
	"name": "python new add samples_5",
	"properties": {
		"folder": {
			"name": "Sample Notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "78b203d6-8f9a-4c23-8b66-f9c79d4ac641"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"21ec7343-96cc-4cf6-93d3-37698f473dfb": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "1",
										"1": "0.3706",
										"2": "0.4244",
										"3": "0.4057",
										"4": "0.6015",
										"5": "0.6015",
										"6": "0.9990",
										"7": "0.7969",
										"8": "0.8088",
										"9": "0.3026",
										"10": "0.7810",
										"11": "0.0001",
										"12": "0.0000",
										"13": "0.4581",
										"14": "0.0007",
										"15": "0.0000",
										"16": "0.1479",
										"17": "0.1479",
										"18": "0.1479",
										"19": "0.1691",
										"20": "0.3117",
										"21": "0.0176",
										"22": "0.0959",
										"23": "0.1387",
										"24": "0.0221",
										"25": "0.8482",
										"26": "0.6890",
										"27": "0.6890",
										"28": "0.2175",
										"29": "4980000000.0000",
										"30": "0.0003",
										"31": "0.2631",
										"32": "0.3637",
										"33": "0.0023",
										"34": "0.0012",
										"35": "0.6300",
										"36": "0.0213",
										"37": "0.2076",
										"38": "0.7924",
										"39": "0.0050",
										"40": "0.3903",
										"41": "0.0065",
										"42": "0.0959",
										"43": "0.1378",
										"44": "0.3980",
										"45": "0.0870",
										"46": "0.0018",
										"47": "0.0035",
										"48": "0.0002",
										"49": "0.0001",
										"50": "0.0329",
										"51": "0.0342",
										"52": "0.3929",
										"53": "0.0371",
										"54": "0.6728",
										"55": "0.1667",
										"56": "0.1906",
										"57": "0.0041",
										"58": "0.0020",
										"59": "0.0001",
										"60": "0.1473",
										"61": "0.3340",
										"62": "0.2769",
										"63": "0.0010",
										"64": "0.6763",
										"65": "0.7213",
										"66": "0.3391",
										"67": "0.0256",
										"68": "0.9032",
										"69": "0.0020",
										"70": "0.0649",
										"71": "701000000.0000",
										"72": "6550000000.0000",
										"73": "0.5938",
										"74": "458000000.0000",
										"75": "0.6716",
										"76": "0.4242",
										"77": "0.6763",
										"78": "0.3391",
										"79": "0.1265",
										"80": "0.6376",
										"81": "0.4586",
										"82": "0.5204",
										"83": "0.3129",
										"84": "0.1183",
										"85": "0.0000",
										"86": "0.7168",
										"87": "0.0092",
										"88": "0.6229",
										"89": "0.6015",
										"90": "0.8279",
										"91": "0.2902",
										"92": "0.0266",
										"93": "0.5641",
										"94": "1.0000",
										"95": "0.0165"
									},
									{
										"0": "1",
										"1": "0.4643",
										"2": "0.5382",
										"3": "0.5167",
										"4": "0.6102",
										"5": "0.6102",
										"6": "0.9989",
										"7": "0.7974",
										"8": "0.8093",
										"9": "0.3036",
										"10": "0.7815",
										"11": "0.0003",
										"12": "0.0000",
										"13": "0.4619",
										"14": "0.0006",
										"15": "0.0000",
										"16": "0.1823",
										"17": "0.1823",
										"18": "0.1823",
										"19": "0.2089",
										"20": "0.3181",
										"21": "0.0211",
										"22": "0.0937",
										"23": "0.1699",
										"24": "0.0221",
										"25": "0.8481",
										"26": "0.6897",
										"27": "0.6897",
										"28": "0.2176",
										"29": "6110000000.0000",
										"30": "0.0004",
										"31": "0.2645",
										"32": "0.3767",
										"33": "0.0060",
										"34": "0.0040",
										"35": "0.6352",
										"36": "0.0125",
										"37": "0.1712",
										"38": "0.8288",
										"39": "0.0051",
										"40": "0.3768",
										"41": "0.0058",
										"42": "0.0937",
										"43": "0.1690",
										"44": "0.3977",
										"45": "0.0645",
										"46": "0.0013",
										"47": "0.0049",
										"48": "9360000000.0000",
										"49": "719000000.0000",
										"50": "0.0255",
										"51": "0.0069",
										"52": "0.3916",
										"53": "0.0123",
										"54": "0.7511",
										"55": "0.1272",
										"56": "0.1824",
										"57": "0.0149",
										"58": "0.0041",
										"59": "0.0014",
										"60": "0.0570",
										"61": "0.3411",
										"62": "0.2896",
										"63": "0.0052",
										"64": "0.3086",
										"65": "0.7320",
										"66": "0.3297",
										"67": "0.0239",
										"68": "0.9311",
										"69": "0.0022",
										"70": "0.0255",
										"71": "0.0001",
										"72": "7700000000.0000",
										"73": "0.5939",
										"74": "2490000000.0000",
										"75": "0.6716",
										"76": "0.4688",
										"77": "0.3086",
										"78": "0.3297",
										"79": "0.1209",
										"80": "0.6411",
										"81": "0.4590",
										"82": "0.5671",
										"83": "0.3142",
										"84": "0.0478",
										"85": "0.0000",
										"86": "0.7953",
										"87": "0.0083",
										"88": "0.6237",
										"89": "0.6102",
										"90": "0.8400",
										"91": "0.2838",
										"92": "0.2646",
										"93": "0.5702",
										"94": "1.0000",
										"95": "0.0208"
									},
									{
										"0": "1",
										"1": "0.4261",
										"2": "0.4990",
										"3": "0.4723",
										"4": "0.6015",
										"5": "0.6014",
										"6": "0.9989",
										"7": "0.7964",
										"8": "0.8084",
										"9": "0.3020",
										"10": "0.7803",
										"11": "0.0002",
										"12": "25500000.0000",
										"13": "0.4585",
										"14": "0.0008",
										"15": "0.0000",
										"16": "0.1779",
										"17": "0.1779",
										"18": "0.1937",
										"19": "0.1806",
										"20": "0.3071",
										"21": "0.0059",
										"22": "0.0923",
										"23": "0.1428",
										"24": "0.0228",
										"25": "0.8481",
										"26": "0.6895",
										"27": "0.6895",
										"28": "0.2176",
										"29": "7280000000.0000",
										"30": "0.0004",
										"31": "0.2642",
										"32": "0.3689",
										"33": "0.0115",
										"34": "0.0053",
										"35": "0.6296",
										"36": "0.0212",
										"37": "0.2075",
										"38": "0.7925",
										"39": "0.0051",
										"40": "0.3791",
										"41": "0.0066",
										"42": "0.0923",
										"43": "0.1480",
										"44": "0.4066",
										"45": "0.0150",
										"46": "0.0015",
										"47": "0.0042",
										"48": "65000000.0000",
										"49": "2650000000.0000",
										"50": "0.0134",
										"51": "0.0290",
										"52": "0.3820",
										"53": "0.1410",
										"54": "0.8295",
										"55": "0.3402",
										"56": "0.6028",
										"57": "0.0010",
										"58": "0.0063",
										"59": "5340000000.0000",
										"60": "0.0982",
										"61": "0.3367",
										"62": "0.2775",
										"63": "0.0139",
										"64": "0.4460",
										"65": "0.7427",
										"66": "0.3348",
										"67": "0.0037",
										"68": "0.9099",
										"69": "0.0021",
										"70": "0.0214",
										"71": "0.0018",
										"72": "0.0010",
										"73": "0.5945",
										"74": "761000000.0000",
										"75": "0.6716",
										"76": "0.2762",
										"77": "0.4460",
										"78": "0.3348",
										"79": "0.1179",
										"80": "0.6428",
										"81": "0.4593",
										"82": "0.5385",
										"83": "0.3145",
										"84": "0.0253",
										"85": "0.0000",
										"86": "0.7747",
										"87": "0.0400",
										"88": "0.6238",
										"89": "0.6014",
										"90": "0.8368",
										"91": "0.2902",
										"92": "0.0266",
										"93": "0.5637",
										"94": "1.0000",
										"95": "0.0165"
									},
									{
										"0": "1",
										"1": "0.3998",
										"2": "0.4513",
										"3": "0.4577",
										"4": "0.5835",
										"5": "0.5835",
										"6": "0.9987",
										"7": "0.7970",
										"8": "0.8090",
										"9": "0.3033",
										"10": "0.7812",
										"11": "0.0001",
										"12": "0.0000",
										"13": "0.4657",
										"14": "0.0004",
										"15": "0.0000",
										"16": "0.1542",
										"17": "0.1542",
										"18": "0.1542",
										"19": "0.1937",
										"20": "0.3217",
										"21": "0.0144",
										"22": "0.0778",
										"23": "0.1486",
										"24": "0.0220",
										"25": "0.8480",
										"26": "0.6891",
										"27": "0.6891",
										"28": "0.2176",
										"29": "4880000000.0000",
										"30": "0.0004",
										"31": "0.2634",
										"32": "0.3841",
										"33": "0.0042",
										"34": "0.0029",
										"35": "0.6302",
										"36": "0.0096",
										"37": "0.1515",
										"38": "0.8485",
										"39": "0.0050",
										"40": "0.3797",
										"41": "0.0054",
										"42": "0.0777",
										"43": "0.1476",
										"44": "0.3979",
										"45": "0.0900",
										"46": "0.0020",
										"47": "0.0032",
										"48": "7130000000.0000",
										"49": "9150000000.0000",
										"50": "0.0281",
										"51": "0.0155",
										"52": "0.3785",
										"53": "0.0213",
										"54": "0.7258",
										"55": "0.1616",
										"56": "0.2258",
										"57": "0.0189",
										"58": "0.0030",
										"59": "0.0010",
										"60": "0.0987",
										"61": "0.3487",
										"62": "0.2766",
										"63": "0.0035",
										"64": "0.6158",
										"65": "0.7298",
										"66": "0.3315",
										"67": "0.0222",
										"68": "0.9069",
										"69": "0.0018",
										"70": "0.0242",
										"71": "8140000000.0000",
										"72": "6050000000.0000",
										"73": "0.5939",
										"74": "2030000000.0000",
										"75": "0.6715",
										"76": "0.5591",
										"77": "0.6158",
										"78": "0.3315",
										"79": "0.1208",
										"80": "0.5790",
										"81": "0.4485",
										"82": "0.6041",
										"83": "0.3024",
										"84": "0.0672",
										"85": "0.0000",
										"86": "0.7396",
										"87": "0.0033",
										"88": "0.6229",
										"89": "0.5835",
										"90": "0.8347",
										"91": "0.2817",
										"92": "0.0267",
										"93": "0.5647",
										"94": "1.0000",
										"95": "0.0240"
									},
									{
										"0": "1",
										"1": "0.4650",
										"2": "0.5384",
										"3": "0.5223",
										"4": "0.5988",
										"5": "0.5988",
										"6": "0.9990",
										"7": "0.7974",
										"8": "0.8093",
										"9": "0.3035",
										"10": "0.7816",
										"11": "7890000000.0000",
										"12": "0.0000",
										"13": "0.4627",
										"14": "0.0007",
										"15": "0.0000",
										"16": "0.1675",
										"17": "0.1675",
										"18": "0.1675",
										"19": "0.2125",
										"20": "0.3192",
										"21": "0.0297",
										"22": "0.0969",
										"23": "0.1684",
										"24": "0.0221",
										"25": "0.8483",
										"26": "0.6897",
										"27": "0.6897",
										"28": "0.2176",
										"29": "5510000000.0000",
										"30": "0.0004",
										"31": "0.2652",
										"32": "0.3797",
										"33": "0.0060",
										"34": "0.0037",
										"35": "0.6361",
										"36": "0.0051",
										"37": "0.1065",
										"38": "0.8935",
										"39": "0.0053",
										"40": "0.3750",
										"41": "0.0066",
										"42": "0.0969",
										"43": "0.1675",
										"44": "0.4001",
										"45": "0.1754",
										"46": "0.0014",
										"47": "0.0044",
										"48": "0.0002",
										"49": "0.0003",
										"50": "0.0402",
										"51": "0.0581",
										"52": "0.3944",
										"53": "0.0240",
										"54": "0.7518",
										"55": "0.2603",
										"56": "0.3584",
										"57": "0.0142",
										"58": "0.0043",
										"59": "0.0007",
										"60": "0.1102",
										"61": "0.3446",
										"62": "0.2879",
										"63": "0.0049",
										"64": "0.9750",
										"65": "0.7320",
										"66": "0.3307",
										"67": "0.0000",
										"68": "0.9139",
										"69": "0.0022",
										"70": "0.0264",
										"71": "6680000000.0000",
										"72": "5050000000.0000",
										"73": "0.5939",
										"74": "824000000.0000",
										"75": "0.6716",
										"76": "0.3096",
										"77": "0.9750",
										"78": "0.3307",
										"79": "0.1109",
										"80": "0.6224",
										"81": "0.4544",
										"82": "0.5785",
										"83": "0.3116",
										"84": "0.0477",
										"85": "0.0000",
										"86": "0.7950",
										"87": "0.0039",
										"88": "0.6235",
										"89": "0.5988",
										"90": "0.8400",
										"91": "0.2785",
										"92": "0.0248",
										"93": "0.5756",
										"94": "1.0000",
										"95": "0.0355"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "Bankrupt?",
										"type": "string"
									},
									{
										"key": "1",
										"name": " ROA(C) before interest and depreciation before interest",
										"type": "string"
									},
									{
										"key": "2",
										"name": " ROA(A) before interest and % after tax",
										"type": "string"
									},
									{
										"key": "3",
										"name": " ROA(B) before interest and depreciation after tax",
										"type": "string"
									},
									{
										"key": "4",
										"name": " Operating Gross Margin",
										"type": "string"
									},
									{
										"key": "5",
										"name": " Realized Sales Gross Margin",
										"type": "string"
									},
									{
										"key": "6",
										"name": " Operating Profit Rate",
										"type": "string"
									},
									{
										"key": "7",
										"name": " Pre-tax net Interest Rate",
										"type": "string"
									},
									{
										"key": "8",
										"name": " After-tax net Interest Rate",
										"type": "string"
									},
									{
										"key": "9",
										"name": " Non-industry income and expenditure/revenue",
										"type": "string"
									},
									{
										"key": "10",
										"name": " Continuous interest rate (after tax)",
										"type": "string"
									},
									{
										"key": "11",
										"name": " Operating Expense Rate",
										"type": "string"
									},
									{
										"key": "12",
										"name": " Research and development expense rate",
										"type": "string"
									},
									{
										"key": "13",
										"name": " Cash flow rate",
										"type": "string"
									},
									{
										"key": "14",
										"name": " Interest-bearing debt interest rate",
										"type": "string"
									},
									{
										"key": "15",
										"name": " Tax rate (A)",
										"type": "string"
									},
									{
										"key": "16",
										"name": " Net Value Per Share (B)",
										"type": "string"
									},
									{
										"key": "17",
										"name": " Net Value Per Share (A)",
										"type": "string"
									},
									{
										"key": "18",
										"name": " Net Value Per Share (C)",
										"type": "string"
									},
									{
										"key": "19",
										"name": " Persistent EPS in the Last Four Seasons",
										"type": "string"
									},
									{
										"key": "20",
										"name": " Cash Flow Per Share",
										"type": "string"
									},
									{
										"key": "21",
										"name": " Revenue Per Share (Yuan ??)",
										"type": "string"
									},
									{
										"key": "22",
										"name": " Operating Profit Per Share (Yuan ??)",
										"type": "string"
									},
									{
										"key": "23",
										"name": " Per Share Net profit before tax (Yuan ??)",
										"type": "string"
									},
									{
										"key": "24",
										"name": " Realized Sales Gross Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "25",
										"name": " Operating Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "26",
										"name": " After-tax Net Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "27",
										"name": " Regular Net Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "28",
										"name": " Continuous Net Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "29",
										"name": " Total Asset Growth Rate",
										"type": "string"
									},
									{
										"key": "30",
										"name": " Net Value Growth Rate",
										"type": "string"
									},
									{
										"key": "31",
										"name": " Total Asset Return Growth Rate Ratio",
										"type": "string"
									},
									{
										"key": "32",
										"name": " Cash Reinvestment %",
										"type": "string"
									},
									{
										"key": "33",
										"name": " Current Ratio",
										"type": "string"
									},
									{
										"key": "34",
										"name": " Quick Ratio",
										"type": "string"
									},
									{
										"key": "35",
										"name": " Interest Expense Ratio",
										"type": "string"
									},
									{
										"key": "36",
										"name": " Total debt/Total net worth",
										"type": "string"
									},
									{
										"key": "37",
										"name": " Debt ratio %",
										"type": "string"
									},
									{
										"key": "38",
										"name": " Net worth/Assets",
										"type": "string"
									},
									{
										"key": "39",
										"name": " Long-term fund suitability ratio (A)",
										"type": "string"
									},
									{
										"key": "40",
										"name": " Borrowing dependency",
										"type": "string"
									},
									{
										"key": "41",
										"name": " Contingent liabilities/Net worth",
										"type": "string"
									},
									{
										"key": "42",
										"name": " Operating profit/Paid-in capital",
										"type": "string"
									},
									{
										"key": "43",
										"name": " Net profit before tax/Paid-in capital",
										"type": "string"
									},
									{
										"key": "44",
										"name": " Inventory and accounts receivable/Net value",
										"type": "string"
									},
									{
										"key": "45",
										"name": " Total Asset Turnover",
										"type": "string"
									},
									{
										"key": "46",
										"name": " Accounts Receivable Turnover",
										"type": "string"
									},
									{
										"key": "47",
										"name": " Average Collection Days",
										"type": "string"
									},
									{
										"key": "48",
										"name": " Inventory Turnover Rate (times)",
										"type": "string"
									},
									{
										"key": "49",
										"name": " Fixed Assets Turnover Frequency",
										"type": "string"
									},
									{
										"key": "50",
										"name": " Net Worth Turnover Rate (times)",
										"type": "string"
									},
									{
										"key": "51",
										"name": " Revenue per person",
										"type": "string"
									},
									{
										"key": "52",
										"name": " Operating profit per person",
										"type": "string"
									},
									{
										"key": "53",
										"name": " Allocation rate per person",
										"type": "string"
									},
									{
										"key": "54",
										"name": " Working Capital to Total Assets",
										"type": "string"
									},
									{
										"key": "55",
										"name": " Quick Assets/Total Assets",
										"type": "string"
									},
									{
										"key": "56",
										"name": " Current Assets/Total Assets",
										"type": "string"
									},
									{
										"key": "57",
										"name": " Cash/Total Assets",
										"type": "string"
									},
									{
										"key": "58",
										"name": " Quick Assets/Current Liability",
										"type": "string"
									},
									{
										"key": "59",
										"name": " Cash/Current Liability",
										"type": "string"
									},
									{
										"key": "60",
										"name": " Current Liability to Assets",
										"type": "string"
									},
									{
										"key": "61",
										"name": " Operating Funds to Liability",
										"type": "string"
									},
									{
										"key": "62",
										"name": " Inventory/Working Capital",
										"type": "string"
									},
									{
										"key": "63",
										"name": " Inventory/Current Liability",
										"type": "string"
									},
									{
										"key": "64",
										"name": " Current Liabilities/Liability",
										"type": "string"
									},
									{
										"key": "65",
										"name": " Working Capital/Equity",
										"type": "string"
									},
									{
										"key": "66",
										"name": " Current Liabilities/Equity",
										"type": "string"
									},
									{
										"key": "67",
										"name": " Long-term Liability to Current Assets",
										"type": "string"
									},
									{
										"key": "68",
										"name": " Retained Earnings to Total Assets",
										"type": "string"
									},
									{
										"key": "69",
										"name": " Total income/Total expense",
										"type": "string"
									},
									{
										"key": "70",
										"name": " Total expense/Assets",
										"type": "string"
									},
									{
										"key": "71",
										"name": " Current Asset Turnover Rate",
										"type": "string"
									},
									{
										"key": "72",
										"name": " Quick Asset Turnover Rate",
										"type": "string"
									},
									{
										"key": "73",
										"name": " Working capitcal Turnover Rate",
										"type": "string"
									},
									{
										"key": "74",
										"name": " Cash Turnover Rate",
										"type": "string"
									},
									{
										"key": "75",
										"name": " Cash Flow to Sales",
										"type": "string"
									},
									{
										"key": "76",
										"name": " Fixed Assets to Assets",
										"type": "string"
									},
									{
										"key": "77",
										"name": " Current Liability to Liability",
										"type": "string"
									},
									{
										"key": "78",
										"name": " Current Liability to Equity",
										"type": "string"
									},
									{
										"key": "79",
										"name": " Equity to Long-term Liability",
										"type": "string"
									},
									{
										"key": "80",
										"name": " Cash Flow to Total Assets",
										"type": "string"
									},
									{
										"key": "81",
										"name": " Cash Flow to Liability",
										"type": "string"
									},
									{
										"key": "82",
										"name": " CFO to Assets",
										"type": "string"
									},
									{
										"key": "83",
										"name": " Cash Flow to Equity",
										"type": "string"
									},
									{
										"key": "84",
										"name": " Current Liability to Current Assets",
										"type": "string"
									},
									{
										"key": "85",
										"name": " Liability-Assets Flag",
										"type": "string"
									},
									{
										"key": "86",
										"name": " Net Income to Total Assets",
										"type": "string"
									},
									{
										"key": "87",
										"name": " Total assets to GNP price",
										"type": "string"
									},
									{
										"key": "88",
										"name": " No-credit Interval",
										"type": "string"
									},
									{
										"key": "89",
										"name": " Gross Profit to Sales",
										"type": "string"
									},
									{
										"key": "90",
										"name": " Net Income to Stockholder's Equity",
										"type": "string"
									},
									{
										"key": "91",
										"name": " Liability to Equity",
										"type": "string"
									},
									{
										"key": "92",
										"name": " Degree of Financial Leverage (DFL)",
										"type": "string"
									},
									{
										"key": "93",
										"name": " Interest Coverage Ratio (Interest expense to EBIT)",
										"type": "string"
									},
									{
										"key": "94",
										"name": " Net Income Flag",
										"type": "string"
									},
									{
										"key": "95",
										"name": " Equity to Liability",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"a7127026-f3a8-408a-9ae6-9bf1f4e00d5a": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "24.0",
										"1": "0.00632",
										"2": "18.0",
										"3": "2.31",
										"4": "0.0",
										"5": "0.538",
										"6": "6.575",
										"7": "65.2",
										"8": "4.09",
										"9": "1.0",
										"10": "296.0",
										"11": "15.3",
										"12": "396.9",
										"13": "4.98"
									},
									{
										"0": "21.6",
										"1": "0.02731",
										"2": "0.0",
										"3": "7.07",
										"4": "0.0",
										"5": "0.469",
										"6": "6.421",
										"7": "78.9",
										"8": "4.9671",
										"9": "2.0",
										"10": "242.0",
										"11": "17.8",
										"12": "396.9",
										"13": "9.14"
									},
									{
										"0": "34.7",
										"1": "0.02729",
										"2": "0.0",
										"3": "7.07",
										"4": "0.0",
										"5": "0.469",
										"6": "7.185",
										"7": "61.1",
										"8": "4.9671",
										"9": "2.0",
										"10": "242.0",
										"11": "17.8",
										"12": "392.83",
										"13": "4.03"
									},
									{
										"0": "33.4",
										"1": "0.03237",
										"2": "0.0",
										"3": "2.18",
										"4": "0.0",
										"5": "0.458",
										"6": "6.998",
										"7": "45.8",
										"8": "6.0622",
										"9": "3.0",
										"10": "222.0",
										"11": "18.7",
										"12": "394.63",
										"13": "2.94"
									},
									{
										"0": "36.2",
										"1": "0.06905",
										"2": "0.0",
										"3": "2.18",
										"4": "0.0",
										"5": "0.458",
										"6": "7.147",
										"7": "54.2",
										"8": "6.0622",
										"9": "3.0",
										"10": "222.0",
										"11": "18.7",
										"12": "396.9",
										"13": "5.33"
									},
									{
										"0": "28.7",
										"1": "0.02985",
										"2": "0.0",
										"3": "2.18",
										"4": "0.0",
										"5": "0.458",
										"6": "6.43",
										"7": "58.7",
										"8": "6.0622",
										"9": "3.0",
										"10": "222.0",
										"11": "18.7",
										"12": "394.12",
										"13": "5.21"
									},
									{
										"0": "22.9",
										"1": "0.08829",
										"2": "12.5",
										"3": "7.87",
										"4": "0.0",
										"5": "0.524",
										"6": "6.012",
										"7": "66.6",
										"8": "5.5605",
										"9": "5.0",
										"10": "311.0",
										"11": "15.2",
										"12": "395.6",
										"13": "12.43"
									},
									{
										"0": "27.1",
										"1": "0.14455",
										"2": "12.5",
										"3": "7.87",
										"4": "0.0",
										"5": "0.524",
										"6": "6.172",
										"7": "96.1",
										"8": "5.9505",
										"9": "5.0",
										"10": "311.0",
										"11": "15.2",
										"12": "396.9",
										"13": "19.15"
									},
									{
										"0": "16.5",
										"1": "0.21124",
										"2": "12.5",
										"3": "7.87",
										"4": "0.0",
										"5": "0.524",
										"6": "5.631",
										"7": "100.0",
										"8": "6.0821",
										"9": "5.0",
										"10": "311.0",
										"11": "15.2",
										"12": "386.63",
										"13": "29.93"
									},
									{
										"0": "18.9",
										"1": "0.17004",
										"2": "12.5",
										"3": "7.87",
										"4": "0.0",
										"5": "0.524",
										"6": "6.004",
										"7": "85.9",
										"8": "6.5921",
										"9": "5.0",
										"10": "311.0",
										"11": "15.2",
										"12": "386.71",
										"13": "17.1"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "target",
										"type": "double"
									},
									{
										"key": "1",
										"name": "f0",
										"type": "double"
									},
									{
										"key": "2",
										"name": "f1",
										"type": "double"
									},
									{
										"key": "3",
										"name": "f2",
										"type": "double"
									},
									{
										"key": "4",
										"name": "f3",
										"type": "double"
									},
									{
										"key": "5",
										"name": "f4",
										"type": "double"
									},
									{
										"key": "6",
										"name": "f5",
										"type": "double"
									},
									{
										"key": "7",
										"name": "f6",
										"type": "double"
									},
									{
										"key": "8",
										"name": "f7",
										"type": "double"
									},
									{
										"key": "9",
										"name": "f8",
										"type": "double"
									},
									{
										"key": "10",
										"name": "f9",
										"type": "double"
									},
									{
										"key": "11",
										"name": "f10",
										"type": "double"
									},
									{
										"key": "12",
										"name": "f11",
										"type": "double"
									},
									{
										"key": "13",
										"name": "f12",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"bf857932-48ad-4a05-97fa-4efb15bd4eac": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "count",
										"1": "404",
										"2": "404",
										"3": "404",
										"4": "404",
										"5": "404",
										"6": "404",
										"7": "404",
										"8": "404",
										"9": "404",
										"10": "404",
										"11": "404",
										"12": "404",
										"13": "404",
										"14": "404"
									},
									{
										"0": "mean",
										"1": "22.54653465346535",
										"2": "3.4594762623762376",
										"3": "12.387376237623762",
										"4": "11.081386138613857",
										"5": "0.0594059405940594",
										"6": "0.5516482673267324",
										"7": "6.27518811881188",
										"8": "67.38044554455446",
										"9": "3.8675388613861386",
										"10": "9.158415841584159",
										"11": "404.5990099009901",
										"12": "18.460643564356428",
										"13": "355.57777227722704",
										"14": "12.477945544554453"
									},
									{
										"0": "stddev",
										"1": "8.98063883126667",
										"2": "8.963989468570858",
										"3": "24.736107242965968",
										"4": "6.932029021988665",
										"5": "0.23667599606006476",
										"6": "0.11667525810157786",
										"7": "0.6676242752927922",
										"8": "28.53180696580572",
										"9": "2.1454416420989646",
										"10": "8.522028292531425",
										"11": "165.29089358685016",
										"12": "2.1828023015213165",
										"13": "92.50099254507464",
										"14": "7.0415410412239074"
									},
									{
										"0": "min",
										"1": "5.0",
										"2": "0.00632",
										"3": "0.0",
										"4": "0.46",
										"5": "0.0",
										"6": "0.385",
										"7": "3.863",
										"8": "2.9",
										"9": "1.137",
										"10": "1.0",
										"11": "187.0",
										"12": "12.6",
										"13": "2.52",
										"14": "1.73"
									},
									{
										"0": "25%",
										"1": "17.3",
										"2": "0.0795",
										"3": "0.0",
										"4": "5.13",
										"5": "0.0",
										"6": "0.448",
										"7": "5.885",
										"8": "41.9",
										"9": "2.1069",
										"10": "4.0",
										"11": "280.0",
										"12": "17.3",
										"13": "374.68",
										"14": "6.87"
									},
									{
										"0": "50%",
										"1": "21.1",
										"2": "0.2498",
										"3": "0.0",
										"4": "8.56",
										"5": "0.0",
										"6": "0.538",
										"7": "6.172",
										"8": "75.0",
										"9": "3.3175",
										"10": "5.0",
										"11": "330.0",
										"12": "19.0",
										"13": "391.34",
										"14": "11.38"
									},
									{
										"0": "75%",
										"1": "24.8",
										"2": "2.77974",
										"3": "17.5",
										"4": "18.1",
										"5": "0.0",
										"6": "0.624",
										"7": "6.59",
										"8": "94.0",
										"9": "5.2447",
										"10": "8.0",
										"11": "666.0",
										"12": "20.2",
										"13": "395.77",
										"14": "16.3"
									},
									{
										"0": "max",
										"1": "50.0",
										"2": "88.9762",
										"3": "100.0",
										"4": "27.74",
										"5": "1.0",
										"6": "0.871",
										"7": "8.78",
										"8": "100.0",
										"9": "12.1265",
										"10": "24.0",
										"11": "711.0",
										"12": "22.0",
										"13": "396.9",
										"14": "37.97"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "summary",
										"type": "string"
									},
									{
										"key": "1",
										"name": "target",
										"type": "string"
									},
									{
										"key": "2",
										"name": "f0",
										"type": "string"
									},
									{
										"key": "3",
										"name": "f1",
										"type": "string"
									},
									{
										"key": "4",
										"name": "f2",
										"type": "string"
									},
									{
										"key": "5",
										"name": "f3",
										"type": "string"
									},
									{
										"key": "6",
										"name": "f4",
										"type": "string"
									},
									{
										"key": "7",
										"name": "f5",
										"type": "string"
									},
									{
										"key": "8",
										"name": "f6",
										"type": "string"
									},
									{
										"key": "9",
										"name": "f7",
										"type": "string"
									},
									{
										"key": "10",
										"name": "f8",
										"type": "string"
									},
									{
										"key": "11",
										"name": "f9",
										"type": "string"
									},
									{
										"key": "12",
										"name": "f10",
										"type": "string"
									},
									{
										"key": "13",
										"name": "f11",
										"type": "string"
									},
									{
										"key": "14",
										"name": "f12",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"276b9a04-42d2-443f-bc84-c08f64791f58": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "Spark MLlib - Linear Regression",
										"1": "24.92643840415788",
										"2": "4.992638421131445",
										"3": "0.7510580823593881",
										"4": "3.515918087212872"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "model",
										"type": "string"
									},
									{
										"key": "1",
										"name": "mean_squared_error",
										"type": "double"
									},
									{
										"key": "2",
										"name": "root_mean_squared_error",
										"type": "double"
									},
									{
										"key": "3",
										"name": "R^2",
										"type": "double"
									},
									{
										"key": "4",
										"name": "mean_absolute_error",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"1"
									],
									"isStacked": false
								}
							}
						}
					},
					"161dee3a-8853-48e8-b278-5ec70577e59a": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "5.6",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.5888,
												666,
												24,
												26.77,
												5.987,
												396.9,
												25.0461,
												0.693
											]
										},
										"2": "33.079368591308594",
										"3": "33.079368591308594"
									},
									{
										"0": "7.2",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.5741,
												666,
												24,
												20.32,
												6.343,
												396.9,
												14.2362,
												0.693
											]
										},
										"2": "40.372337341308594",
										"3": "40.372337341308594"
									},
									{
										"0": "7.2",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.8347,
												666,
												24,
												29.05,
												6.434,
												27.25,
												18.0846,
												0.679
											]
										},
										"2": "29.140405654907227",
										"3": "29.140405654907227"
									},
									{
										"0": "7.4",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												89.5,
												18.1,
												1.5184,
												666,
												24,
												31.99,
												5,
												396.9,
												22.5971,
												0.7
											]
										},
										"2": "28.2320556640625",
										"3": "28.2320556640625"
									},
									{
										"0": "8.3",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												96,
												18.1,
												1.7028,
												666,
												24,
												19.77,
												5.349,
												396.9,
												24.8017,
												0.693
											]
										},
										"2": "34.082637786865234",
										"3": "34.082637786865234"
									},
									{
										"0": "8.8",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												91.2,
												18.1,
												1.4395,
												666,
												24,
												30.63,
												4.368,
												285.83,
												20.0849,
												0.7
											]
										},
										"2": "26.424739837646484",
										"3": "26.424739837646484"
									},
									{
										"0": "9.7",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												97,
												18.1,
												1.77,
												666,
												24,
												25.68,
												5.036,
												396.9,
												11.5779,
												0.7
											]
										},
										"2": "34.44858169555664",
										"3": "34.44858169555664"
									},
									{
										"0": "10.5",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												92.4,
												18.1,
												1.8662,
												666,
												24,
												22.11,
												5.818,
												391.45,
												22.0511,
												0.74
											]
										},
										"2": "34.5134162902832",
										"3": "34.5134162902832"
									},
									{
										"0": "10.5",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												100,
												18.1,
												1.4672,
												666,
												24,
												28.28,
												4.652,
												396.9,
												24.3938,
												0.7
											]
										},
										"2": "28.64730453491211",
										"3": "28.64730453491211"
									},
									{
										"0": "10.9",
										"1": {
											"type": 0,
											"size": 1073741824,
											"indices": [
												287408178,
												419613213,
												464140333,
												556319843,
												584064458,
												780495775,
												824677867,
												851899283,
												921728202,
												933181289,
												1055634727
											],
											"values": [
												20.2,
												99.1,
												18.1,
												1.5192,
												666,
												24,
												21.08,
												6.545,
												396.9,
												15.8744,
												0.671
											]
										},
										"2": "40.45200729370117",
										"3": "40.45200729370117"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "target",
										"type": "double"
									},
									{
										"key": "1",
										"name": "features",
										"type": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
									},
									{
										"key": "2",
										"name": "rawPrediction",
										"type": "double"
									},
									{
										"key": "3",
										"name": "prediction",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"2"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"9ce1d30a-8090-4aee-9d78-08531adbfd99": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "Spark MLlib - Linear Regression",
										"1": "24.92643840415788",
										"2": "4.992638421131445",
										"3": "0.7510580823593881",
										"4": "3.515918087212872"
									},
									{
										"0": "Vowpal Wabbit",
										"1": "324.95461942303706",
										"2": "18.02649770263312",
										"3": "-2.2453423466969245",
										"4": "16.76088128557392"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "model",
										"type": "string"
									},
									{
										"key": "1",
										"name": "mean_squared_error",
										"type": "double"
									},
									{
										"key": "2",
										"name": "root_mean_squared_error",
										"type": "double"
									},
									{
										"key": "3",
										"name": "R^2",
										"type": "double"
									},
									{
										"key": "4",
										"name": "mean_absolute_error",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"1"
									],
									"isStacked": false
								}
							}
						}
					},
					"a6fbe6b5-884d-4c84-b58c-61e6c819f73f": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "5.6",
										"1": {
											"type": 1,
											"values": [
												25.0461,
												0,
												18.1,
												0,
												0.693,
												5.987,
												100,
												1.5888,
												24,
												666,
												20.2,
												396.9,
												26.77
											]
										},
										"2": "8.299484569945886"
									},
									{
										"0": "7.2",
										"1": {
											"type": 1,
											"values": [
												14.2362,
												0,
												18.1,
												0,
												0.693,
												6.343,
												100,
												1.5741,
												24,
												666,
												20.2,
												396.9,
												20.32
											]
										},
										"2": "10.121720926091578"
									},
									{
										"0": "7.2",
										"1": {
											"type": 1,
											"values": [
												18.0846,
												0,
												18.1,
												0,
												0.679,
												6.434,
												100,
												1.8347,
												24,
												666,
												20.2,
												27.25,
												29.05
											]
										},
										"2": "8.013533609234399"
									},
									{
										"0": "7.4",
										"1": {
											"type": 1,
											"values": [
												22.5971,
												0,
												18.1,
												0,
												0.7,
												5,
												89.5,
												1.5184,
												24,
												666,
												20.2,
												396.9,
												31.99
											]
										},
										"2": "7.449539495962057"
									},
									{
										"0": "8.3",
										"1": {
											"type": 1,
											"values": [
												24.8017,
												0,
												18.1,
												0,
												0.693,
												5.349,
												96,
												1.7028,
												24,
												666,
												20.2,
												396.9,
												19.77
											]
										},
										"2": "9.487400634994824"
									},
									{
										"0": "8.8",
										"1": {
											"type": 1,
											"values": [
												20.0849,
												0,
												18.1,
												0,
												0.7,
												4.368,
												91.2,
												1.4395,
												24,
												666,
												20.2,
												285.83,
												30.63
											]
										},
										"2": "7.4754323630329305"
									},
									{
										"0": "9.7",
										"1": {
											"type": 1,
											"values": [
												11.5779,
												0,
												18.1,
												0,
												0.7,
												5.036,
												97,
												1.77,
												24,
												666,
												20.2,
												396.9,
												25.68
											]
										},
										"2": "8.24097822817968"
									},
									{
										"0": "10.5",
										"1": {
											"type": 1,
											"values": [
												22.0511,
												0,
												18.1,
												0,
												0.74,
												5.818,
												92.4,
												1.8662,
												24,
												666,
												20.2,
												391.45,
												22.11
											]
										},
										"2": "7.896767979323552"
									},
									{
										"0": "10.5",
										"1": {
											"type": 1,
											"values": [
												24.3938,
												0,
												18.1,
												0,
												0.7,
												4.652,
												100,
												1.4672,
												24,
												666,
												20.2,
												396.9,
												28.28
											]
										},
										"2": "7.5362974916226"
									},
									{
										"0": "10.9",
										"1": {
											"type": 1,
											"values": [
												15.8744,
												0,
												18.1,
												0,
												0.671,
												6.545,
												99.1,
												1.5192,
												24,
												666,
												20.2,
												396.9,
												21.08
											]
										},
										"2": "10.11527720279883"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "target",
										"type": "double"
									},
									{
										"key": "1",
										"name": "features",
										"type": "org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7"
									},
									{
										"key": "2",
										"name": "prediction",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"2"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"142aa196-41e3-4d06-b86e-8ab762b3c508": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "Spark MLlib - Linear Regression",
										"1": "24.92643840415788",
										"2": "4.992638421131445",
										"3": "0.7510580823593881",
										"4": "3.515918087212872"
									},
									{
										"0": "Vowpal Wabbit",
										"1": "324.95461942303706",
										"2": "18.02649770263312",
										"3": "-2.2453423466969245",
										"4": "16.76088128557392"
									},
									{
										"0": "LightGBM",
										"1": "20.04796613915392",
										"2": "4.477495520841302",
										"3": "0.7997796935705608",
										"4": "2.4181816323266268"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "model",
										"type": "string"
									},
									{
										"key": "1",
										"name": "mean_squared_error",
										"type": "double"
									},
									{
										"key": "2",
										"name": "root_mean_squared_error",
										"type": "double"
									},
									{
										"key": "3",
										"name": "R^2",
										"type": "double"
									},
									{
										"key": "4",
										"name": "mean_absolute_error",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"1"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Bankruptcy Prediction with LightGBM Classifier\r\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Introduction of LightGBM\n",
					"[LightGBM](https://github.com/Microsoft/LightGBM) is an open-source, distributed, high-performance gradient boosting framework with following advantages: \n",
					"-   Composability: LightGBM models can be incorporated into existing\n",
					"    SparkML Pipelines, and used for batch, streaming, and serving\n",
					"    workloads.\n",
					"-   Performance: LightGBM on Spark is 10-30% faster than SparkML on\n",
					"    the Higgs dataset, and achieves a 15% increase in AUC.  [Parallel\n",
					"    experiments](https://github.com/Microsoft/LightGBM/blob/master/docs/Experiments.rst#parallel-experiment)\n",
					"    have verified that LightGBM can achieve a linear speed-up by using\n",
					"    multiple machines for training in specific settings.\n",
					"-   Functionality: LightGBM offers a wide array of [tunable\n",
					"    parameters](https://github.com/Microsoft/LightGBM/blob/master/docs/Parameters.rst),\n",
					"    that one can use to customize their decision tree system. LightGBM on\n",
					"    Spark also supports new types of problems such as quantile regression.\n",
					"-   Cross platform：LightGBM on Spark is available on Spark (Scala) and PySpark (Python).\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/Documentation/bankruptcy image.png\" width=\"800\" style=\"float: center;\"/>\n",
					"\n",
					"In this example, we use LightGBM to build a classification model in order to predict bankruptcy."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Read dataset\r\n",
					"\r\n",
					"Get a sample data of financial statements for 6819 companies, 220 represents bankrupted companies while 6599 firms are not bankrupted. "
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"dataset = spark.read.format(\"csv\")\\\n",
					"  .option(\"header\", True)\\\n",
					"  .load(\"wasbs://publicwasb@mmlspark.blob.core.windows.net/company_bankruptcy_prediction_data.csv\")"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Exploratory data\r\n",
					"\r\n",
					"Look at the data and evaluate its suitability for use in a model."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(dataset.head(5))"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# print dataset size\r\n",
					"print(\"Total number of records: \" + str(dataset.count()))"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"# convert features to double type\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql.types import DoubleType\n",
					"for colName in dataset.columns:\n",
					"  dataset = dataset.withColumn(colName, col(colName).cast(DoubleType()))\n",
					"print(\"Schema: \")\n",
					"dataset.printSchema()"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Generation of testing and training data sets\r\n",
					"\r\n",
					"Simple split, 85% for training and 15% for testing the model. Playing with this ratio may result in different models.\r\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Split the dataset into train and test\n",
					"\n",
					"train, test = dataset.randomSplit([0.70, 0.30], seed=1)\n",
					"\n",
					"# Add featurizer to convert features to vector\n",
					"\n",
					"from pyspark.ml.feature import VectorAssembler\n",
					"feature_cols = dataset.columns[1:]\n",
					"featurizer = VectorAssembler(\n",
					"    inputCols=feature_cols,\n",
					"    outputCol='features'\n",
					")\n",
					"train_data = featurizer.transform(train)['Bankrupt?', 'features']\n",
					"test_data = featurizer.transform(test)['Bankrupt?', 'features']"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"# check if the data is unbalanced\r\n",
					"train_data.groupBy(\"Bankrupt?\").count().show()"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Train the model\r\n",
					"Train the Classifier model."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"from mmlspark.lightgbm import LightGBMClassifier\n",
					"\n",
					"model = LightGBMClassifier(objective=\"binary\", featuresCol=\"features\", labelCol=\"Bankrupt?\", isUnbalance=True)\n",
					"model = model.fit(train_data)"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"from mmlspark.lightgbm import LightGBMClassificationModel\n",
					"model.saveNativeModel(\"/lgbmcmodel\")\n",
					"model = LightGBMClassificationModel.loadNativeModelFromFile(\"/lgbmcmodel\")"
				],
				"attachments": null,
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"print(model.getFeatureImportances())"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Model Performance Evaluation\r\n",
					"\r\n",
					"After training the model, we evaluate the performance of the model using the test set."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"predictions = model.transform(test_data)\n",
					"#predictions.limit(10).toPandas()"
				],
				"attachments": null,
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from mmlspark.train import ComputeModelStatistics\r\n",
					"\r\n",
					"# Compute model performance metrics\r\n",
					"metrics = ComputeModelStatistics(evaluationMetric=\"classification\", \r\n",
					"                                 labelCol=\"prediction\", \r\n",
					"                                 scoredLabelsCol=\"Bankrupt?\").transform(predictions)\r\n",
					"metrics.toPandas()"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Clean up resources\r\n",
					"To ensure the Spark instance is shut down, end any connected sessions(notebooks). The pool shuts down when the **idle time** specified in the Apache Spark pool is reached. You can also select **stop session** from the status bar at the upper right of the notebook.\r\n",
					"\r\n",
					"![stopsession](https://adsnotebookrelease.blob.core.windows.net/adsnotebookrelease/adsnotebook/image/stopsession.png)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Next steps\r\n",
					"\r\n",
					"* [Check out Synapse sample notebooks](https://github.com/Azure-Samples/Synapse/tree/main/MachineLearning) \r\n",
					"* [MMLSpark GitHub Repo](https://github.com/Azure/mmlspark)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Boston house price prediction with Vowpal Wabbit, LightGBM and Spark MLlib\n",
					"\n",
					"This notebook shows how to build simple regression models by using \n",
					"[Vowpal Wabbit (VW)](https://github.com/VowpalWabbit/vowpal_wabbit) and \n",
					"[LightGBM](https://github.com/microsoft/LightGBM) with MMLSpark.\n",
					" We also compare the results with \n",
					" [Spark MLlib Linear Regression](https://spark.apache.org/docs/latest/ml-classification-regression.html#linear-regression)."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"import math\n",
					"from matplotlib.colors import ListedColormap, Normalize\n",
					"from matplotlib.cm import get_cmap\n",
					"import matplotlib.pyplot as plt\n",
					"from mmlspark.train import ComputeModelStatistics\n",
					"from mmlspark.vw import VowpalWabbitRegressor, VowpalWabbitFeaturizer\n",
					"from mmlspark.lightgbm import LightGBMRegressor\n",
					"import numpy as np\n",
					"import pandas as pd\n",
					"from pyspark.ml.feature import VectorAssembler\n",
					"from pyspark.ml.regression import LinearRegression\n",
					"from sklearn.datasets import load_boston"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Prepare Dataset\n",
					"We use [*Boston house price* dataset](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_boston.html) \n",
					". \n",
					"The data was collected in 1978 from Boston area and consists of 506 entries with 14 features including the value of homes. \n",
					"We use `sklearn.datasets` module to download it easily, then split the set into training and testing by 75/25."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"boston = load_boston()\n",
					"\n",
					"feature_cols = ['f' + str(i) for i in range(boston.data.shape[1])]\n",
					"header = ['target'] + feature_cols\n",
					"df = spark.createDataFrame(\n",
					"    pd.DataFrame(data=np.column_stack((boston.target, boston.data)), columns=header)\n",
					").repartition(1)\n",
					"print(\"Dataframe has {} rows\".format(df.count()))\n",
					"display(df.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"source": [
					"train_data, test_data = df.randomSplit([0.75, 0.25], seed=42)\n",
					"train_data.cache()\n",
					"test_data.cache()"
				],
				"attachments": null,
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"source": [
					"Following is the summary of the training set."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"display(train_data.summary().toPandas())"
				],
				"attachments": null,
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"source": [
					"Plot feature distributions over different target values (house prices in our case)."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"features = train_data.columns[1:]\n",
					"values = train_data.drop('target').toPandas()\n",
					"ncols = 5\n",
					"nrows = math.ceil(len(features) / ncols)\n",
					"\n",
					"yy = [r['target'] for r in train_data.select('target').collect()]\n",
					"\n",
					"f, axes = plt.subplots(nrows, ncols, sharey=True, figsize=(30,10))\n",
					"f.tight_layout()\n",
					"\n",
					"for irow in range(nrows):\n",
					"    axes[irow][0].set_ylabel('target')\n",
					"    for icol in range(ncols):\n",
					"        try:\n",
					"            feat = features[irow*ncols + icol]\n",
					"            xx = values[feat]\n",
					"\n",
					"            axes[irow][icol].scatter(xx, yy, s=10, alpha=0.25)\n",
					"            axes[irow][icol].set_xlabel(feat)\n",
					"            axes[irow][icol].get_yaxis().set_ticks([])\n",
					"        except IndexError:\n",
					"            f.delaxes(axes[irow][icol])"
				],
				"attachments": null,
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Baseline - Spark MLlib Linear Regressor\n",
					"\n",
					"First, we set a baseline performance by using Linear Regressor in Spark MLlib."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"featurizer = VectorAssembler(\n",
					"    inputCols=feature_cols,\n",
					"    outputCol='features'\n",
					")\n",
					"lr_train_data = featurizer.transform(train_data)['target', 'features']\n",
					"lr_test_data = featurizer.transform(test_data)['target', 'features']\n",
					"display(lr_train_data.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# By default, `maxIter` is 100. Other params you may want to change include: `regParam`, `elasticNetParam`, etc.\n",
					"lr = LinearRegression(\n",
					"    labelCol='target',\n",
					")\n",
					"\n",
					"lr_model = lr.fit(lr_train_data)\n",
					"lr_predictions = lr_model.transform(lr_test_data)\n",
					"\n",
					"display(lr_predictions.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"source": [
					"We evaluate the prediction result by using `mmlspark.train.ComputeModelStatistics` which returns four metrics:\n",
					"* [MSE (Mean Squared Error)](https://en.wikipedia.org/wiki/Mean_squared_error)\n",
					"* [RMSE (Root Mean Squared Error)](https://en.wikipedia.org/wiki/Root-mean-square_deviation) = sqrt(MSE)\n",
					"* [R quared](https://en.wikipedia.org/wiki/Coefficient_of_determination)\n",
					"* [MAE (Mean Absolute Error)](https://en.wikipedia.org/wiki/Mean_absolute_error)"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"metrics = ComputeModelStatistics(\n",
					"    evaluationMetric='regression',\n",
					"    labelCol='target',\n",
					"    scoresCol='prediction'\n",
					").transform(lr_predictions)\n",
					"\n",
					"results = metrics.toPandas()\n",
					"results.insert(0, 'model', ['Spark MLlib - Linear Regression'])\n",
					"display(results)"
				],
				"attachments": null,
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Vowpal Wabbit"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"Perform VW-style feature hashing. Many types (numbers, string, bool, map of string to (number, string)) are supported."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"vw_featurizer = VowpalWabbitFeaturizer(\n",
					"    inputCols=feature_cols,\n",
					"    outputCol='features',\n",
					")\n",
					"vw_train_data = vw_featurizer.transform(train_data)['target', 'features']\n",
					"vw_test_data = vw_featurizer.transform(test_data)['target', 'features']\n",
					"display(vw_train_data.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"source": [
					"See [VW wiki](https://github.com/vowpalWabbit/vowpal_wabbit/wiki/Command-Line-Arguments) for command line arguments."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# Use the same number of iterations as Spark MLlib's Linear Regression (=100)\n",
					"args = \"--holdout_off --loss_function quantile -l 7 -q :: --power_t 0.3\"\n",
					"vwr = VowpalWabbitRegressor(\n",
					"    labelCol='target',\n",
					"    args=args,\n",
					"    numPasses=100,\n",
					")\n",
					"\n",
					"# To reduce number of partitions (which will effect performance), use `vw_train_data.repartition(1)`\n",
					"vw_train_data_2 = vw_train_data.repartition(1).cache()\n",
					"print(vw_train_data_2.count())\n",
					"vw_model = vwr.fit(vw_train_data_2.repartition(1))\n",
					"vw_predictions = vw_model.transform(vw_test_data)\n",
					"\n",
					"display(vw_predictions.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"metrics = ComputeModelStatistics(\n",
					"    evaluationMetric='regression',\n",
					"    labelCol='target',\n",
					"    scoresCol='prediction'\n",
					").transform(vw_predictions)\n",
					"\n",
					"vw_result = metrics.toPandas()\n",
					"vw_result.insert(0, 'model', ['Vowpal Wabbit'])\n",
					"results = results.append(\n",
					"    vw_result,\n",
					"    ignore_index=True\n",
					")\n",
					"display(results)"
				],
				"attachments": null,
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"source": [
					"## LightGBM"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"lgr = LightGBMRegressor(\n",
					"    objective='quantile',\n",
					"    alpha=0.2,\n",
					"    learningRate=0.3,\n",
					"    numLeaves=31,\n",
					"    labelCol='target',\n",
					"    numIterations=100,\n",
					")\n",
					"\n",
					"# Using one partition since the training dataset is very small\n",
					"repartitioned_data = lr_train_data.repartition(1).cache()\n",
					"print(repartitioned_data.count())\n",
					"lg_model = lgr.fit(repartitioned_data)\n",
					"lg_predictions = lg_model.transform(lr_test_data)\n",
					"\n",
					"display(lg_predictions.limit(10).toPandas())"
				],
				"attachments": null,
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"metrics = ComputeModelStatistics(\n",
					"    evaluationMetric='regression',\n",
					"    labelCol='target',\n",
					"    scoresCol='prediction'\n",
					").transform(lg_predictions)\n",
					"\n",
					"lg_result = metrics.toPandas()\n",
					"lg_result.insert(0, 'model', ['LightGBM'])\n",
					"results = results.append(\n",
					"    lg_result,\n",
					"    ignore_index=True\n",
					")\n",
					"display(results)"
				],
				"attachments": null,
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"source": [
					"Following figure shows the actual-vs.-prediction graphs of the results:\n",
					"\n",
					"<img width=\"1102\" alt=\"lr-vw-lg\" src=\"https://user-images.githubusercontent.com/42475935/64071975-4c3e9600-cc54-11e9-8b1f-9a1ee300f445.png\">"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"cmap = get_cmap('YlOrRd')\n",
					"\n",
					"target = np.array(test_data.select('target').collect()).flatten()\n",
					"model_preds = [\n",
					"    (\"Spark MLlib Linear Regression\", lr_predictions),\n",
					"    (\"Vowpal Wabbit\", vw_predictions),\n",
					"    (\"LightGBM\", lg_predictions)\n",
					"]"
				],
				"attachments": null,
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"f, axes = plt.subplots(1, len(model_preds), sharey=True, figsize=(18, 6))\r\n",
					"f.tight_layout()\r\n",
					"\r\n",
					"for i, (model_name, preds) in enumerate(model_preds):\r\n",
					"    preds = np.array(preds.select('prediction').collect()).flatten()\r\n",
					"    err = np.absolute(preds - target)\r\n",
					"\r\n",
					"    norm = Normalize()\r\n",
					"    clrs = cmap(np.asarray(norm(err)))[:, :-1]\r\n",
					"    axes[i].scatter(preds, target, s=60, c=clrs, edgecolors='#888888', alpha=0.75)\r\n",
					"    axes[i].plot((0, 60), (0, 60), linestyle='--', color='#888888')\r\n",
					"    axes[i].set_xlabel('Predicted values')\r\n",
					"    if i ==0:\r\n",
					"        axes[i].set_ylabel('Actual values')\r\n",
					"    axes[i].set_title(model_name)\r\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Clean up resources\r\n",
					"To ensure the Spark instance is shut down, end any connected sessions(notebooks). The pool shuts down when the **idle time** specified in the Apache Spark pool is reached. You can also select **stop session** from the status bar at the upper right of the notebook.\r\n",
					"\r\n",
					"![stopsession](https://adsnotebookrelease.blob.core.windows.net/adsnotebookrelease/adsnotebook/image/stopsession.png)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Next steps\r\n",
					"\r\n",
					"* [Check out Synapse sample notebooks](https://github.com/Azure-Samples/Synapse/tree/main/MachineLearning) \r\n",
					"* [MMLSpark GitHub Repo](https://github.com/Azure/mmlspark)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Quantile Regression for Drug Discovery with LightGBM Regressor"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Introduction of LightGBM\n",
					"[LightGBM](https://github.com/Microsoft/LightGBM) is an open-source, distributed, high-performance gradient boosting framework with following advantages: \n",
					"-   Composability: LightGBM models can be incorporated into existing\n",
					"    SparkML Pipelines, and used for batch, streaming, and serving\n",
					"    workloads.\n",
					"-   Performance: LightGBM on Spark is 10-30% faster than SparkML on\n",
					"    the Higgs dataset, and achieves a 15% increase in AUC.  [Parallel\n",
					"    experiments](https://github.com/Microsoft/LightGBM/blob/master/docs/Experiments.rst#parallel-experiment)\n",
					"    have verified that LightGBM can achieve a linear speed-up by using\n",
					"    multiple machines for training in specific settings.\n",
					"-   Functionality: LightGBM offers a wide array of [tunable\n",
					"    parameters](https://github.com/Microsoft/LightGBM/blob/master/docs/Parameters.rst),\n",
					"    that one can use to customize their decision tree system. LightGBM on\n",
					"    Spark also supports new types of problems such as quantile regression.\n",
					"-   Cross platform：LightGBM on Spark is available on Spark (Scala) and PySpark (Python)."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/Documentation/drug.png\" width=\"800\" style=\"float: center;\"/>\n",
					"\n",
					"In this example, we use LightGBM quantile regressor on the Triazines dataset."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Read dataset"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"triazines = spark.read.format(\"libsvm\").load(\"wasbs://publicwasb@mmlspark.blob.core.windows.net/triazines.scale.svmlight\")"
				],
				"attachments": null,
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Exploratory data"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# print some basic info\n",
					"print(\"records read: \" + str(triazines.count()))\n",
					"print(\"Schema: \")\n",
					"triazines.printSchema()\n",
					"triazines.limit(10).toPandas()"
				],
				"attachments": null,
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Generation of testing and training data sets\r\n",
					"\r\n",
					"Simple split, 85% for training and 15% for testing the model. Playing with this ratio may result in different models."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"train, test = triazines.randomSplit([0.85, 0.15], seed=1)"
				],
				"attachments": null,
				"execution_count": 29
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Train the model\r\n",
					"Train the quantile regressor on the training data."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"from mmlspark.lightgbm import LightGBMRegressor\n",
					"model = LightGBMRegressor(objective='quantile',\n",
					"                          alpha=0.2,\n",
					"                          learningRate=0.3,\n",
					"                          numLeaves=31).fit(train)"
				],
				"attachments": null,
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Save and load LightGBM to a file using the LightGBM native representation\r\n",
					"\r\n",
					"from mmlspark.lightgbm import LightGBMRegressionModel\r\n",
					"model.saveNativeModel(\"/mymodel\")\r\n",
					"model = LightGBMRegressionModel.loadNativeModelFromFile(\"/mymodel\")"
				],
				"attachments": null,
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# View the feature importances of the trained model\r\n",
					"\r\n",
					"print(model.getFeatureImportances())"
				],
				"attachments": null,
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Model performance evaluation\r\n",
					"\r\n",
					"After training the model, we evaluate the performance of the model using the test set."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"scoredData = model.transform(test)\n",
					"scoredData.limit(10).toPandas()"
				],
				"attachments": null,
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"source": [
					"# Compute metrics using ComputeModelStatistics\n",
					"\n",
					"from mmlspark.train import ComputeModelStatistics\n",
					"metrics = ComputeModelStatistics(evaluationMetric='regression',\n",
					"                                 labelCol='label',\n",
					"                                 scoresCol='prediction') \\\n",
					"            .transform(scoredData)\n",
					"metrics.toPandas()"
				],
				"attachments": null,
				"execution_count": 34
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Clean up resources\r\n",
					"To ensure the Spark instance is shut down, end any connected sessions(notebooks). The pool shuts down when the **idle time** specified in the Apache Spark pool is reached. You can also select **stop session** from the status bar at the upper right of the notebook.\r\n",
					"\r\n",
					"![stopsession](https://adsnotebookrelease.blob.core.windows.net/adsnotebookrelease/adsnotebook/image/stopsession.png)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Next steps\r\n",
					"\r\n",
					"* [Check out Synapse sample notebooks](https://github.com/Azure-Samples/Synapse/tree/main/MachineLearning) \r\n",
					"* [MMLSpark GitHub Repo](https://github.com/Azure/mmlspark)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Twitter Sentiment Classification using Vowpal Wabbit in Microsoft Machine Learning for Apache Spark\n",
					"\n",
					"In this example, we show how to build a sentiment classification model using [Vowpal Wabbit (VW)](https://github.com/Azure/mmlspark/blob/master/docs/vw.md) in MMLSpark. The data set we use to train and evaluate the model is [Sentiment140](http://help.sentiment140.com/for-students/?source=post_page---------------------------) twitter data. First, we import a few packages that we need."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"import os\n",
					"import re\n",
					"import urllib.request\n",
					"import numpy as np\n",
					"import pandas as pd\n",
					"from zipfile import ZipFile\n",
					"from bs4 import BeautifulSoup\n",
					"from pyspark.sql.functions import udf, rand, when, col\n",
					"from pyspark.sql.types import StructType, StructField, DoubleType, StringType\n",
					"from pyspark.ml import Pipeline\n",
					"from pyspark.ml.feature import CountVectorizer, RegexTokenizer\n",
					"from mmlspark.vw import VowpalWabbitClassifier\n",
					"from mmlspark.train import ComputeModelStatistics\n",
					"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
					"import matplotlib.pyplot as plt"
				],
				"attachments": null,
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"source": [
					"# URL to download the sentiment140 dataset and data file names\n",
					"DATA_URL = \"http://cs.stanford.edu/people/alecmgo/trainingandtestdata.zip\"\n",
					"TRAIN_FILENAME = \"training.1600000.processed.noemoticon.csv\"\n",
					"TEST_FILENAME = \"testdata.manual.2009.06.14.csv\"\n",
					"# Folder for storing the downloaded data\n",
					"DATA_FOLDER = \"data\"\n",
					"# Data column names\n",
					"COL_NAMES = [\"label\", \"id\", \"date\", \"query_string\", \"user\", \"text\"]\n",
					"# Text encoding type of the data\n",
					"ENCODING = \"iso-8859-1\""
				],
				"attachments": null,
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Data Preparation\n",
					"\n",
					"We use [Sentiment140](http://help.sentiment140.com/for-students/?source=post_page---------------------------) twitter data which originated from a Standford research project to train and evaluate VW classification model on Spark. The same dataset has been used in a previous [Azure Machine Learning sample](https://github.com/Azure-Samples/MachineLearningSamples-TwitterSentimentPrediction) on twitter sentiment prediction. Before using the data to build the classification model, we first download and clean up the data."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"def download_data(url, data_folder=DATA_FOLDER, filename=\"downloaded_data.zip\"):\n",
					"    \"\"\"Download and extract data from url\"\"\"\n",
					"    \n",
					"    data_dir = \"./\" + DATA_FOLDER\n",
					"    if not os.path.exists(data_dir): os.makedirs(data_dir)\n",
					"    downloaded_filepath = os.path.join(data_dir, filename)\n",
					"    print(\"Downloading data...\")\n",
					"    urllib.request.urlretrieve(url, downloaded_filepath)\n",
					"    print(\"Extracting data...\")\n",
					"    zipfile = ZipFile(downloaded_filepath)\n",
					"    zipfile.extractall(data_dir)\n",
					"    zipfile.close()\n",
					"    print(\"Finished data downloading and extraction.\")\n",
					"    \n",
					"download_data(DATA_URL)"
				],
				"attachments": null,
				"execution_count": 37
			},
			{
				"cell_type": "markdown",
				"source": [
					"Let's read the training data into a Spark DataFrame."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_train = pd.read_csv(os.path.join(\".\", DATA_FOLDER, TRAIN_FILENAME), \n",
					"                       header=None, names=COL_NAMES, encoding=ENCODING)\n",
					"df_train = spark.createDataFrame(df_train, verifySchema=False)"
				],
				"attachments": null,
				"execution_count": 38
			},
			{
				"cell_type": "markdown",
				"source": [
					"We can take a look at the training data and check how many samples it has. We should see that there are 1.6 million samples in the training data. There are 6 fields in the training data:\n",
					"* label: the sentiment of the tweet (0.0 = negative, 2.0 = neutral, 4.0 = positive)\n",
					"* id: the id of the tweet\n",
					"* date: the date of the tweet\n",
					"* query_string: The query used to extract the data. If there is no query, then this value is NO_QUERY.\n",
					"* user: the user that tweeted\n",
					"* text: the text of the tweet"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_train.limit(10).toPandas()"
				],
				"attachments": null,
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"source": [
					"print(\"Number of training samples: \", df_train.count())"
				],
				"attachments": null,
				"execution_count": 40
			},
			{
				"cell_type": "markdown",
				"source": [
					"Before training the model, we randomly permute the data to mix negative and positive samples. This is helpful for properly training online learning algorithms like VW. To speed up model training, we use a subset of the data to train the model. If training with the full training set, typically you will see better performance of the model on the test set. "
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_train = df_train.orderBy(rand()) \\\n",
					"                   .limit(100000) \\\n",
					"                   .withColumn(\"label\", when(col(\"label\") > 0, 1.0).otherwise(0.0)) \\\n",
					"                   .select([\"label\", \"text\"])"
				],
				"attachments": null,
				"execution_count": 41
			},
			{
				"cell_type": "markdown",
				"source": [
					"## VW MMLSpark Training\n",
					"\n",
					"Now we are ready to define a pipeline which consists of feture engineering steps and the VW model."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Specify featurizers\n",
					"tokenizer = RegexTokenizer(inputCol=\"text\",\n",
					"                           outputCol=\"words\")\n",
					"\n",
					"count_vectorizer = CountVectorizer(inputCol=\"words\",\n",
					"                                   outputCol=\"features\")\n",
					"\n",
					"# Define VW classification model\n",
					"args = \"--loss_function=logistic --quiet --holdout_off\"\n",
					"vw_model = VowpalWabbitClassifier(featuresCol=\"features\", \n",
					"                                  labelCol=\"label\", \n",
					"                                  args=args, \n",
					"                                  numPasses=10)\n",
					"\n",
					"# Create a pipeline\n",
					"vw_pipeline = Pipeline(stages=[tokenizer, count_vectorizer, vw_model])"
				],
				"attachments": null,
				"execution_count": 42
			},
			{
				"cell_type": "markdown",
				"source": [
					"With the prepared training data, we can fit the model pipeline as follows."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"vw_trained = vw_pipeline.fit(df_train)"
				],
				"attachments": null,
				"execution_count": 43
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Model Performance Evaluation\n",
					"\n",
					"After training the model, we evaluate the performance of the model using the test set which is manually labeled."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_test = pd.read_csv(os.path.join(\".\", DATA_FOLDER, TEST_FILENAME), \n",
					"                       header=None, names=COL_NAMES, encoding=ENCODING)\n",
					"df_test = spark.createDataFrame(df_test, verifySchema=False)"
				],
				"attachments": null,
				"execution_count": 44
			},
			{
				"cell_type": "markdown",
				"source": [
					"We only use positive and negative tweets in the test set to evaluate the model, since our model is a binary classification model trained with only positive and negative tweets."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"print(\"Number of test samples before filtering: \", df_test.count())\n",
					"df_test = df_test.filter(col(\"label\") != 2.0) \\\n",
					"                 .withColumn(\"label\", when(col(\"label\") > 0, 1.0).otherwise(0.0)) \\\n",
					"                 .select([\"label\", \"text\"])\n",
					"print(\"Number of test samples after filtering: \", df_test.count())"
				],
				"attachments": null,
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"source": [
					"# Make predictions\n",
					"predictions = vw_trained.transform(df_test)\n",
					"predictions.limit(10).toPandas()"
				],
				"attachments": null,
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"source": [
					"# Compute model performance metrics\n",
					"metrics = ComputeModelStatistics(evaluationMetric=\"classification\", \n",
					"                                 labelCol=\"label\", \n",
					"                                 scoredLabelsCol=\"prediction\").transform(predictions)\n",
					"metrics.toPandas()"
				],
				"attachments": null,
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"source": [
					"# Utility class for plotting ROC curve (https://stackoverflow.com/questions/52847408/pyspark-extract-roc-curve)\n",
					"class CurveMetrics(BinaryClassificationMetrics):\n",
					"    def __init__(self, *args):\n",
					"        super(CurveMetrics, self).__init__(*args)\n",
					"\n",
					"    def get_curve(self, method):\n",
					"        rdd = getattr(self._java_model, method)().toJavaRDD()\n",
					"        points = []\n",
					"        for row in rdd.collect():\n",
					"            points += [(float(row._1()), float(row._2()))]\n",
					"        return points\n",
					"\n",
					"preds = predictions.select(\"label\", \"probability\") \\\n",
					"                   .rdd.map(lambda row: (float(row[\"probability\"][1]), float(row[\"label\"])))\n",
					"roc_points = CurveMetrics(preds).get_curve(\"roc\")\n",
					"\n",
					"# Plot ROC curve\n",
					"fig = plt.figure()\n",
					"x_val = [x[0] for x in roc_points]\n",
					"y_val = [x[1] for x in roc_points]\n",
					"plt.title(\"ROC curve on test set\")\n",
					"plt.xlabel(\"False positive rate\")\n",
					"plt.ylabel(\"True positive rate\")\n",
					"plt.plot(x_val, y_val)\n",
					"\n",
					"# display(fig)\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": 48
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Clean up resources\r\n",
					"To ensure the Spark instance is shut down, end any connected sessions(notebooks). The pool shuts down when the **idle time** specified in the Apache Spark pool is reached. You can also select **stop session** from the status bar at the upper right of the notebook.\r\n",
					"\r\n",
					"![stopsession](https://adsnotebookrelease.blob.core.windows.net/adsnotebookrelease/adsnotebook/image/stopsession.png)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Next steps\r\n",
					"\r\n",
					"* [Check out Synapse sample notebooks](https://github.com/Azure-Samples/Synapse/tree/main/MachineLearning) \r\n",
					"* [MMLSpark GitHub Repo](https://github.com/Azure/mmlspark)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nbsphinx": "hidden"
				},
				"source": [
					"**This notebook sample is based on the official [Jupyter Widgets sample notebook `Widget Basics.ipynb`](https://github.com/jupyter-widgets/ipywidgets/blob/7.x/docs/source/examples/Widget%20Basics.ipynb)\r\n",
					".** Edit this cell to see the full license content.\r\n",
					"\r\n",
					"<!--\r\n",
					"Copyright (c) 2015 Project Jupyter Contributors\r\n",
					"All rights reserved.\r\n",
					"\r\n",
					"Redistribution and use in source and binary forms, with or without\r\n",
					"modification, are permitted provided that the following conditions are met:\r\n",
					"\r\n",
					"1. Redistributions of source code must retain the above copyright notice, this\r\n",
					"   list of conditions and the following disclaimer.\r\n",
					"\r\n",
					"2. Redistributions in binary form must reproduce the above copyright notice,\r\n",
					"   this list of conditions and the following disclaimer in the documentation\r\n",
					"   and/or other materials provided with the distribution.\r\n",
					"\r\n",
					"3. Neither the name of the copyright holder nor the names of its\r\n",
					"   contributors may be used to endorse or promote products derived from\r\n",
					"   this software without specific prior written permission.\r\n",
					"\r\n",
					"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n",
					"AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n",
					"IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n",
					"DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\n",
					"FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n",
					"DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n",
					"SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n",
					"CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n",
					"OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n",
					"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n",
					"-->"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Synapse Studio users**: Now you can consume Jupyter Widgets in Synapse Studio (with \"Preview Features\" turned on). Since it's a Python library, you will need to consume it in PySpark environment.\r\n",
					"To go through this sample, please create a new notebook from the sample, then execute the code cells one by one with \"Run\" button or `Shift+Enter` shortcut keys.\r\n",
					"\r\n",
					"See https://go.microsoft.com/fwlink/?linkid=2170793 for general introduction as well as known limitations on the Jupyter Widgets support in Synapse Studio."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Simple Widget Introduction"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## What are widgets?"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"Widgets are eventful python objects that have a representation in the browser, often as a control like a slider, textbox, etc."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## What can they be used for?"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"You can use widgets to build **interactive GUIs** for your notebooks.  \n",
					"You can also use widgets to **synchronize stateful and stateless information** between Python and JavaScript."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Using widgets  "
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"To use the widget framework, you need to import `ipywidgets`."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"import ipywidgets as widgets\r\n",
					"widgets.__version__"
				],
				"attachments": null,
				"execution_count": 49
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"### repr"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"Widgets have their own display `repr` which allows them to be displayed using IPython's display framework.  Constructing and returning an `IntSlider` automatically displays the widget (as seen below).  Widgets are displayed inside the output area below the code cell. Clearing cell output will also remove the widget."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"widgets.IntSlider()"
				],
				"attachments": null,
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"### display()"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"You can also explicitly display the widget using `display(...)`.\r\n",
					"\r\n",
					"**Synapse Studio users**:\r\n",
					"* Usually you do not need to import `display` function manually from `IPython.display` package. The pre-imported global `display(d)` function now also accepts `Widget` instance as first parameter (`d`). Just note that it does not support more than 1 arguments. If you want to display 2 Widgets respectively, call `display` twice.\r\n",
					"* In case you have already imported `display` function from IPython, you can always use the following statement to restore the global `display` function provided by Synapse Studio, if necessary (e.g. when you want to display Spark `DataFrame`).\r\n",
					"```python\r\n",
					"from notebookutils import display\r\n",
					"```"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# pre-imported `display` already supports Widget. No need to import from IPyton.\n",
					"# from IPython.display import display\n",
					"w = widgets.IntSlider()\n",
					"display(w)"
				],
				"attachments": null,
				"execution_count": 51
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"### Multiple display() calls"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"If you display the same widget twice, the displayed instances in the front-end will remain in sync with each other.  Try dragging the slider below and watch the slider above."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"display(w)"
				],
				"attachments": null,
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Why does displaying the same widget twice work?"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"Widgets are represented in the back-end by a single object.  Each time a widget is displayed, a new representation of that same object is created in the front-end.  These representations are called views.\n",
					"\n",
					"![Kernel & front-end diagram](https://ipywidgets.readthedocs.io/en/7.x/_images/WidgetModelView.png)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"### Closing widgets"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"You can close a widget by calling its `close()` method."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"display(w)"
				],
				"attachments": null,
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"source": [
					"w.close()"
				],
				"attachments": null,
				"execution_count": 54
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Widget properties"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"All of the IPython widgets share a similar naming scheme.  To read the value of a widget, you can query its `value` property."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"w = widgets.IntSlider()\n",
					"display(w)"
				],
				"attachments": null,
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"source": [
					"w.value"
				],
				"attachments": null,
				"execution_count": 56
			},
			{
				"cell_type": "markdown",
				"source": [
					"Similarly, to set a widget's value, you can set its `value` property."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"w.value = 100"
				],
				"attachments": null,
				"execution_count": 57
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"### Keys"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"In addition to `value`, most widgets share `keys`, `description`, and `disabled`.  To see the entire list of synchronized, stateful properties of any specific widget, you can query the `keys` property."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"w.keys"
				],
				"attachments": null,
				"execution_count": 58
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Shorthand for setting the initial values of widget properties"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"While creating a widget, you can set some or all of the initial values of that widget by defining them as keyword arguments in the widget's constructor (as seen below)."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"widgets.Text(value='Hello World!', disabled=True)"
				],
				"attachments": null,
				"execution_count": 59
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Linking two similar widgets"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"If you need to display the same value two different ways, you'll have to use two different widgets. Instead of attempting to manually synchronize the values of the two widgets, you can use the `link`  or `jslink` function to link two properties together (the difference between these is discussed in [Widget Events](https://ipywidgets.readthedocs.io/en/7.x/examples/Widget%20Events.html)).  Below, the values of two widgets are linked together.\r\n",
					"\r\n",
					"**Synapse Studio users**: `jslink` is not supported yet. As a workaround, use `link`."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"a = widgets.FloatText()\n",
					"b = widgets.FloatSlider()\n",
					"display(a)\n",
					"display(b)\n",
					"\n",
					"# `jslink` is not supported in Synapse Studio yet. Ue `link` instead.\n",
					"# mylink = widgets.jslink((a, 'value'), (b, 'value'))\n",
					"mylink = widgets.link((a, 'value'), (b, 'value'))"
				],
				"attachments": null,
				"execution_count": 60
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Unlinking widgets"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"slideshow": {
						"slide_type": "slide"
					}
				},
				"source": [
					"Unlinking the widgets is simple.  All you have to do is call `.unlink` on the link object.  Try changing one of the widgets above after unlinking to see that they can be independently changed."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"mylink.unlink()"
				],
				"attachments": null,
				"execution_count": 61
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nbsphinx": "hidden"
				},
				"source": [
					"## Next steps\r\n",
					"\r\n",
					"You can find more examples from the official [Jupyter Widgets documentation](https://ipywidgets.readthedocs.io/en/7.x/index.html), including\r\n",
					"* [Widget List](https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html)\r\n",
					"* [Widget Events](https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html)\r\n",
					"* [Widget Styling](https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Styling.html)\r\n",
					"* and more!"
				],
				"attachments": null
			}
		]
	}
}